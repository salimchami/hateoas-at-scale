worker_processes 1;

events {
    worker_connections 1024;
}

http {
    # Configuration du DNS Resolver pour Consul
    resolver 172.25.0.5:8600 valid=5s;
    resolver_timeout 5s;

    # Définition de la zone de mémoire partagée pour la résolution dynamique des noms
    # Ceci est nécessaire pour la directive 'resolve'
    upstream users_backend {
        zone users_backend_zone 64k; # Ajout de la zone de mémoire partagée
        server users-service.service.consul:8080 resolve;
    }

    upstream products_backend {
        zone products_backend_zone 64k; # Ajout de la zone de mémoire partagée
        server products-service.service.consul:8080 resolve;
    }

    upstream carts_backend {
        zone carts_backend_zone 64k; # Ajout de la zone de mémoire partagée
        server carts-service.service.consul:8080 resolve;
    }

    server {
        listen 80;
        server_name localhost;

        location /users-service/ {
            proxy_pass http://users_backend/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

            proxy_set_header X-Service-Path "/users-service";
            proxy_set_header X-Forwarded-Prefix "/users-service";
            proxy_set_header X-Forwarded-Host $host;
            proxy_set_header X-Forwarded-Port $server_port;
            proxy_set_header X-Forwarded-Proto $scheme;

            add_header Access-Control-Allow-Origin "http://localhost:4200" always;
            add_header Access-Control-Allow-Methods "GET, POST, PUT, PATCH, DELETE, OPTIONS" always;
            add_header Access-Control-Allow-Headers "Content-Type, Authorization, X-Requested-With" always;
            add_header Access-Control-Allow-Credentials "true" always;

            # Handle preflight (OPTIONS) requests
            if ($request_method = OPTIONS) {
                add_header Access-Control-Allow-Origin "http://localhost:4200" always;
                add_header Access-Control-Allow-Methods "GET, POST, PUT, PATCH, DELETE, OPTIONS" always;
                add_header Access-Control-Allow-Headers "Content-Type, Authorization, X-Requested-With" always;
                add_header Access-Control-Allow-Credentials "true" always;
                add_header Access-Control-Max-Age 3600; # Cache preflight response for 1 hour
                return 204; # No Content
            }

            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
        }

        location /products-service/ {
            proxy_pass http://products_backend/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

            proxy_set_header X-Service-Path "/products-service";
            proxy_set_header X-Forwarded-Prefix "/products-service";
            proxy_set_header X-Forwarded-Host $host;
            proxy_set_header X-Forwarded-Port $server_port;
            proxy_set_header X-Forwarded-Proto $scheme;

            add_header Access-Control-Allow-Origin "http://localhost:4200" always;
            add_header Access-Control-Allow-Methods "GET, POST, PUT, PATCH, DELETE, OPTIONS" always;
            add_header Access-Control-Allow-Headers "Content-Type, Authorization, X-Requested-With" always;
            add_header Access-Control-Allow-Credentials "true" always;

            # Handle preflight (OPTIONS) requests
            if ($request_method = OPTIONS) {
                add_header Access-Control-Allow-Origin "http://localhost:4200" always;
                add_header Access-Control-Allow-Methods "GET, POST, PUT, PATCH, DELETE, OPTIONS" always;
                add_header Access-Control-Allow-Headers "Content-Type, Authorization, X-Requested-With" always;
                add_header Access-Control-Allow-Credentials "true" always;
                add_header Access-Control-Max-Age 3600; # Cache preflight response for 1 hour
                return 204; # No Content
            }

            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
        }

        location /carts-service/ {
            proxy_pass http://carts_backend/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

            proxy_set_header X-Service-Path "/carts-service";
            proxy_set_header X-Forwarded-Prefix "/carts-service";
            proxy_set_header X-Forwarded-Host $host;
            proxy_set_header X-Forwarded-Port $server_port;
            proxy_set_header X-Forwarded-Proto $scheme;

            add_header Access-Control-Allow-Origin "http://localhost:4200" always;
            add_header Access-Control-Allow-Methods "GET, POST, PUT, PATCH, DELETE, OPTIONS" always;
            add_header Access-Control-Allow-Headers "Content-Type, Authorization, X-Requested-With" always;
            add_header Access-Control-Allow-Credentials "true" always;

            # Handle preflight (OPTIONS) requests
            if ($request_method = OPTIONS) {
                add_header Access-Control-Allow-Origin "http://localhost:4200" always;
                add_header Access-Control-Allow-Methods "GET, POST, PUT, PATCH, DELETE, OPTIONS" always;
                add_header Access-Control-Allow-Headers "Content-Type, Authorization, X-Requested-With" always;
                add_header Access-Control-Allow-Credentials "true" always;
                add_header Access-Control-Max-Age 3600; # Cache preflight response for 1 hour
                return 204; # No Content
            }

            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
        }

        # Si votre client Angular est servi par Nginx, vous pouvez ajouter une location pour lui
        # Si votre client Angular est toujours sur le port 4200 via son propre conteneur,
        # vous pouvez ignorer cette partie ou la laisser pour un reverse proxy plus tard.
        # Si le client Angular doit être servi par Nginx, vous devriez le construire et le monter ici.
        # Exemple si vous vouliez servir le client Angular directement par Nginx (requerrait un build du client) :
        # location / {
        #     root /usr/share/nginx/html; # Chemin où les fichiers statiques de l'application Angular seraient placés
        #     index index.html index.htm;
        #     try_files $uri $uri/ /index.html;
        # }
    }
}
